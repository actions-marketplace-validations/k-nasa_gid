name: Comment gid

on:
  pull_request:
  push:

jobs:
  list-issues:
    runs-on: macOS-latest
    steps:
      - name: Install gid
        run: |
          curl -L -o gid.tar.gz https://github.com/k-nasa/gid/releases/download/0.0.0/gid_x86_64-apple-darwin.tar.gz
          tar -zxvf gid.tar.gz
          mv gid_x86_64-apple-darwin/gid /usr/local/bin

      - uses: actions/github-script@v6
        env:
          GITHUB_ACCESS_TOKEN: '${{secrets.GITHUB_TOKEN}}'
        with:
          script: |
            const query = `
            query ($owner: String!, $name: String!, $label: String!) {
              repository(owner: $owner, name: $name) {
                issues(first: 100, labels: [$label], states: OPEN) {
                  nodes {
                    number
                  }
                }
              }
            }`;
            const variables = {
              owner: context.repo.owner,
              name: context.repo.repo,
              label: 'root'
            }
            const result = await github.graphql(query, variables)
            console.log(result)

            for (const issue of result.repository.issues.nodes) {
              const query = `
              query ($owner: String!, $name: String!, $number: Int!) {
                repository(owner: $owner, name: $name) {
                  issue(number: $number) {
                    comments(first: 100) {
                      nodes {
                        databaseId
                        body
                      }
                    }
                  }
                }
              }`;

              const variables = {
                owner: context.repo.owner,
                name: context.repo.repo,
                number: issue.number
              }

              const result = await github.graphql(query, variables)
              let id = null;
              for (const comment of result.repository.issue.comments.nodes) {
                if(comment.body.includes("/generate_gid")) {
                  id = comment.databaseId
                }
              }
              if (id !== null) {
                console.log("update comment!!")
                const { exec } = require("child_process");

                const command = `gid -o ${context.repo.owner} -r ${context.repo.repo} -i ${issue.number}`
                exec(command, (error, stdout, stderr) => {
                    if (error) {
                        console.log(`error: ${error.message}`);
                        return;
                    }
                    if (stderr) {
                        console.log(`stderr: ${stderr}`);
                        return;
                    }
                    const mermaid = `${stdout}`;

                    github.rest.issues.updateComment({
                      comment_id: id,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: `/generate_gid\n${mermaid}`
                    })
                });
              }
            }
